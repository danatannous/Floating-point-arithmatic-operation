// Code your design here
module InstructionMemory(input[31:0]PC,
                         output [10:0]Instruction);
  
  integer i;
  reg[10:0] mem[0:255];
  wire [10:0]Instruction;
  
  initial begin
    for (i = 0; i<256; i=i+1) begin
    mem[i] <= 11'b0;
  end
  
  
  ////////////////////////////////////////////
  // Test 1 - Adding operation (without forwarding)
  ////////////////////////////////////////////
  // add $1,$2,$3
  // add $4,$5,$6
  // add $7,$2,$5
  // add $3,$6,$1
  //Pc for this program
  //PC=0
  
    mem [4] <= 11'b00001010011;
    mem [8] <= 11'b00100101110;
    mem [12] <= 11'b00111010101;
    mem [14] <= 11'b00011110001;
  
  
  ////////////////////////////////////////////
  // Test 2 - Subtracting operation (without forwarding)
  ////////////////////////////////////////////
  //sub $6,$4,$3
  //sub $7,$2,$5
  //sub $1,$3,$5
  //sub $4,$3,$6
     //Pc for this program
  //PC=16
  
  
    mem[20] <= 11'b01110100011;
    mem[24] <= 11'b01111010101;
    mem[28] <= 11'b01001011101;
    mem[32] <= 11'b01100011110;
  
 ////////////////////////////////////////////
  // Test 3 - Multiplication operation (without forwarding)
  //////////////////////////////////////////// 
  //mult $2,$6,$3
  //mult $7,$1,$4
  //mult $5,$3,$1
  //mult $6,$2,$4
   //Pc for this program
  //PC=36
  
  
    mem[40] <= 11'b10010110011;
    mem[44] <= 11'b10111001100;
    mem[48] <= 11'b10101011001;
    mem[52] <= 11'b10110010100;
  
   ////////////////////////////////////////////
  // Test 4 - Division operation (without forwarding)
  //////////////////////////////////////////// 
  //div $3,$5,$7
  //div $1,$4,$2
  //div $7,$5,$4
  //div $6,$3,$2
     //Pc for this program
  //PC=56
  
  
    mem[60] <= 11'b11011101111;
    mem[64] <= 11'b11001100010;
    mem[68] <= 11'b11111101100;
    mem[72] <= 11'b11110011010;
  
  ////////////////////////////////////////////
  // Test 5 - Arithmetic Operation with Alu-Alu forwarding 
  //////////////////////////////////////////// 
  //add $1,$1,$2
  //sub $3,$1,$4
  //div $5,$6,$2
  //mul $7,$5,$4
   //Pc for this program
  //PC=76
  
    mem[80] <= 11'b00001001010;
    mem[84] <= 11'b01011001100;
    mem[88] <= 11'b11101110010;
    mem[92] <= 11'b10111101100;
  
  
    ////////////////////////////////////////////
  // Test 6 - Arithmetic Operation without forwarding 
  //////////////////////////////////////////// 
  //add $1,$1,$2
  //sub $3,$1,$4
  //div $5,$6,$2
  //mul $7,$1,$4
   //Pc for this program
  //PC=96
  
    mem[100] <= 11'b00001001010;
    mem[104] <= 11'b01011001100;
    mem[108] <= 11'b11101110010;
    mem[112] <= 11'b10111001100;
      end
  
     assign  Instruction = mem[PC]; 

endmodule
////////////////////////////////////////////////////
// Code your testbench here
// or browse Examples
module testbench();
  
  wire [10:0] Instruction_t;
  reg [31:0] PC_t;
  
  InstructionMemory test_IM(PC_t,Instruction_t);
  
   initial begin 
  
    PC_t = 32'h00000000;
    #1
     $display("instruction is %b", Instruction_t);
  end
endmodule